/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test2;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class generatepo extends javax.swing.JFrame {

    /**
     * Creates new form generatepo
     */
    public generatepo() {
        initComponents();
        showprTable();
        showpoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnback = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnaddpo = new javax.swing.JButton();
        btnnext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Generate Purchase Order");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Price Per Item(RM)", "Quantity", "Price(RM)"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnback.setText("Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        jLabel2.setText("Purchases Requisition :");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Price Per Item(RM)", "Quantity", "Price(RM)"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel3.setText("Purchase Order:");

        btnaddpo.setText("Add To PO");
        btnaddpo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddpoActionPerformed(evt);
            }
        });

        btnnext.setText("Next");
        btnnext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnaddpo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnnext, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(371, 371, 371))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(423, 423, 423))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnaddpo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnext, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showprTable(){
        poclass po = new poclass("C:\\Users\\Asus\\OneDrive\\Desktop\\yushyang\\OODJ\\purchase_requisition.txt");
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        try {
            model.setRowCount(0);
            ArrayList<String> as = po.readData();
            for(int i = 1; i< as.size();i++)
           {
                String line = as.get(i);
                String[] dataRow =line.split("/");
                model.addRow(dataRow);
           }
            
            
        } catch (IOException ex) {
            Logger.getLogger(purchase_order.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void showpoTable(){
        poclass po = new poclass("C:\\Users\\Asus\\OneDrive\\Desktop\\yushyang\\OODJ\\purchase_order.txt");
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        try {
            model.setRowCount(0);
            ArrayList<String> as = po.readData();
            for(int i = 1; i< as.size();i++)
           {
                String line = as.get(i);
                String[] dataRow =line.split("/");
                model.addRow(dataRow);
           }
            
            
        } catch (IOException ex) {
            Logger.getLogger(purchase_order.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        po po = new po();
        po.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnbackActionPerformed

    private void btnnextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnextActionPerformed
        PO_Check add = new PO_Check();
        add.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnnextActionPerformed

    private void btnaddpoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddpoActionPerformed
        // TODO add your handling code here:
//        DefaultTableModel tblModel1 = (DefaultTableModel)jTable1.getModel();
//        DefaultTableModel tblModel2 = (DefaultTableModel)jTable2.getModel();
//        
//        if(jTable1.getSelectedRow()>=0){
//            
//            String ItemID = tblModel1.getValueAt(jTable1.getSelectedRow(),0).toString();
//            String ItemName = tblModel1.getValueAt(jTable1.getSelectedRow(),1).toString();
//            String Priceperitem = tblModel1.getValueAt(jTable1.getSelectedRow(),2).toString();
//            String Quantity = tblModel1.getValueAt(jTable1.getSelectedRow(),3).toString();
//            String Price = tblModel1.getValueAt(jTable1.getSelectedRow(),4).toString();
//            try {
//            delete(ItemID,Quantity);
//            } catch (IOException e) {
//            e.printStackTrace();
//            }   
//            tblModel2.addRow(new Object[]{ItemID, ItemName, Priceperitem, Quantity, Price});
//
//            String entry = ItemID + "/" + ItemName + "/" + Priceperitem + "/" + Quantity + "/" + Price;
//            tblModel1.removeRow(jTable1.getSelectedRow()); 
//            try {
//                add(entry);
//            } catch (IOException ex) {
//                Logger.getLogger(generatepo.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            JOptionPane.showMessageDialog(this,"Success, "+ItemName+" is added to purchase order"); 
//        }
//        else{
//            if(jTable1.getSelectedRow()==0){
//                JOptionPane.showMessageDialog(this,"Table is Empty");
//            }else{
//                JOptionPane.showMessageDialog(this,"Please Select Single Row To Delete");
//            }
//        }
        
        DefaultTableModel tblModel1 = (DefaultTableModel)jTable1.getModel();
        DefaultTableModel tblModel2 = (DefaultTableModel)jTable2.getModel();
        
        if(jTable1.getSelectedRow()>=0){
            
            String ItemID = tblModel1.getValueAt(jTable1.getSelectedRow(),0).toString();
            String ItemName = tblModel1.getValueAt(jTable1.getSelectedRow(),1).toString();
            String Priceperitem = tblModel1.getValueAt(jTable1.getSelectedRow(),2).toString();
            String Quantity = tblModel1.getValueAt(jTable1.getSelectedRow(),3).toString();
            String Price = tblModel1.getValueAt(jTable1.getSelectedRow(),4).toString();
            
            boolean itemExists = false;
            for (int i = 0;i<tblModel2.getRowCount(); i++){
                if (ItemID.equals(tblModel2.getValueAt(i,0).toString())){
                    int oldQuantity = Integer.parseInt(tblModel2.getValueAt(i, 3).toString());
                    int newQuantity = Integer.parseInt(Quantity);
                    int PricePerItem = (int) Double.parseDouble(Price);
                    int totalQuantity = oldQuantity +newQuantity;
                    double newPrice = totalQuantity * PricePerItem;
                    tblModel2.setValueAt(totalQuantity, i, 3);
                    String POItemID = tblModel2.getValueAt(i,0).toString();
                    String entry1 = ItemID +"/"+ItemName+"/"+Priceperitem+"/"+totalQuantity+"/"+newPrice;
                    if(POItemID.equals(ItemID)){
                        try {
                            deletepo(POItemID);
                            add(entry1);
                            deletepr(ItemID,Quantity);
                        } catch (IOException ex) {
                            Logger.getLogger(generatepo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    tblModel1.removeRow(jTable1.getSelectedRow());
                    itemExists = true;
                    JOptionPane.showMessageDialog(this,"Success");
                    break;
                }
            }
            
            if(!itemExists){
                tblModel2.addRow(new Object[]{ItemID, ItemName, Priceperitem, Quantity, Price});
                String entry2 = ItemID + "/" + ItemName + "/" + Priceperitem + "/" + Quantity + "/" + Price;
                try {
                    add(entry2);
                    deletepr(ItemID,Quantity);
                    tblModel1.removeRow(jTable1.getSelectedRow());
                } catch (IOException ex) {
                    Logger.getLogger(generatepo.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this,"Success");
                
            }
            
        }
        else{
            if(jTable1.getSelectedRow()==0){
                JOptionPane.showMessageDialog(this,"Table is Empty");
            }else{
                JOptionPane.showMessageDialog(this,"Please Select Single Row To Delete");
            }
        }
    }//GEN-LAST:event_btnaddpoActionPerformed

    private void add(String b) throws IOException{
        poclass po = new poclass("C:\\Users\\Asus\\OneDrive\\Desktop\\yushyang\\OODJ\\purchase_order.txt");
        ArrayList<String> a = po.readData();
        a.add(b);
        po.writeData(a);
    }
    
    private void deletepo(String itemID) throws IOException {
    poclass po = new poclass("C:\\Users\\Asus\\OneDrive\\Desktop\\yushyang\\OODJ\\purchase_order.txt");
    ArrayList<String> a = po.readData();
    
    for (int i = 0; i < a.size(); i++) {
        String line = a.get(i);
        String[] parts = line.split("/");
        if (parts.length >= 2 && parts[0].equals(itemID) ) {
            a.remove(i);
            break;
        }
    }
    
        po.writeData(a);
    }
    
   private void deletepr(String itemID, String Quantity) throws IOException {
    poclass po = new poclass("C:\\Users\\Asus\\OneDrive\\Desktop\\yushyang\\OODJ\\purchase_requisition.txt");
    ArrayList<String> a = po.readData();
    
    for (int i = 0; i < a.size(); i++) {
        String line = a.get(i);
        String[] parts = line.split("/");
        if (parts.length >= 2 && parts[0].equals(itemID) && parts[3].equals(Quantity)) {
            a.remove(i);
            break;
        }
    }
    
        po.writeData(a);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(generatepo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(generatepo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(generatepo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(generatepo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new generatepo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaddpo;
    private javax.swing.JButton btnback;
    private javax.swing.JButton btnnext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
